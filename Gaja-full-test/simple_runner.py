"""Uproszczony runner test√≥w GAJA."""

import argparse
import asyncio
import json
import sys
import time
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any, Optional

import yaml
import aiohttp
from loguru import logger

# Dodaj src do path
sys.path.append(str(Path(__file__).parent / "src"))

from src.utils.api_client import GajaApiClient
from src.utils.audio_simple import AudioProcessor
from src.utils.data_gen import DataGenerator
from src.utils.io import TestLogger
from src.evaluation.ai_evaluator import AIEvaluator
# AI Evaluator bƒôdzie importowany dynamicznie ≈ºeby uniknƒÖƒá b≈Çƒôd√≥w


class SimpleTestRunner:
    """Uproszczony runner test√≥w."""
    
    def __init__(self, config_path: str = "config.yaml"):
        self.config_path = config_path
        self.config = self.load_config()
        self.results = []
        self.jwt_token: Optional[str] = None
        
        # Komponenty
        self.api_client = None
        self.audio_processor = None
        self.data_generator = DataGenerator()
        self.test_logger = TestLogger()
        
        # AI Evaluator dla surowej oceny
        self.ai_evaluator = AIEvaluator()
        
        # Historia konwersacji dla ka≈ºdego scenariusza
        self.conversation_history: Dict[str, List[Dict[str, Any]]] = {}
        
        # Dane logowania
        self.login_credentials = {
            "admin": {"email": "admin@gaja.app", "password": "admin123"},
            "demo": {"email": "demo@mail.com", "password": "demo1234"}
        }
    
    def load_config(self) -> Dict[str, Any]:
        """≈Åaduje konfiguracjƒô."""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except Exception as e:
            logger.error(f"B≈ÇƒÖd ≈Çadowania konfiguracji: {e}")
            return {
                "gaja": {
                    "base_url": "http://localhost:8001",
                    "auth_token": None
                },
                "voice": {
                    "model": "tts-1",
                    "voice": "alloy"
                }
            }
    
    async def setup_components(self):
        """Inicjalizuje komponenty."""
        try:
            # API Client
            gaja_config = self.config.get("gaja", {})
            self.api_client = GajaApiClient(
                base_url=gaja_config.get("base_url", "http://localhost:8001"),
                api_key=gaja_config.get("auth_token")
            )
            
            # Audio Processor
            self.audio_processor = AudioProcessor()
            
            logger.info("‚úÖ Komponenty zainicjalizowane")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå B≈ÇƒÖd inicjalizacji: {e}")
            return False
    
    async def login(self, user_type: str = "admin") -> bool:
        """Logowanie do serwera GAJA."""
        try:
            if user_type not in self.login_credentials:
                logger.error(f"Nieznany typ u≈ºytkownika: {user_type}")
                return False
                
            credentials = self.login_credentials[user_type]
            gaja_config = self.config.get("gaja", {})
            base_url = gaja_config.get("base_url", "http://localhost:8001").rstrip('/')
            login_url = f"{base_url}/api/v1/auth/login"
            
            logger.info(f"Logowanie jako {credentials['email']}...")
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    login_url,
                    json=credentials,
                    headers={"Content-Type": "application/json"}
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("success") and data.get("token"):
                            self.jwt_token = data["token"]
                            logger.info(f"‚úÖ Zalogowano jako {credentials['email']}")
                            return True
                        else:
                            logger.error(f"‚ùå Niepoprawna odpowied≈∫ serwera: {data}")
                            return False
                    else:
                        error_text = await response.text()
                        logger.error(f"‚ùå B≈ÇƒÖd logowania {response.status}: {error_text}")
                        return False
                        
        except Exception as e:
            logger.error(f"‚ùå WyjƒÖtek podczas logowania: {e}")
            return False
    
    async def send_text_with_auth(self, message: str) -> Dict[str, Any]:
        """Wysy≈Ça wiadomo≈õƒá tekstowƒÖ z autoryzacjƒÖ JWT."""
        try:
            if not self.jwt_token:
                return {"success": False, "error": "Brak tokena JWT - wymagane logowanie"}
            
            gaja_config = self.config.get("gaja", {})
            base_url = gaja_config.get("base_url", "http://localhost:8001").rstrip('/')
            api_url = f"{base_url}/api/v1/ai/query"
            
            headers = {
                "Authorization": f"Bearer {self.jwt_token}",
                "Content-Type": "application/json"
            }
            
            payload = {
                "query": message,
                "context": {
                    "conversation_id": "test-conversation",
                    "source": "e2e-test"
                }
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=payload, headers=headers) as response:
                    if response.status == 200:
                        data = await response.json()
                        return {"success": True, "data": data}
                    else:
                        error_text = await response.text()
                        return {
                            "success": False, 
                            "error": f"HTTP {response.status}: {error_text}"
                        }
                        
        except Exception as e:
            return {"success": False, "error": f"WyjƒÖtek: {str(e)}"}
    
    async def health_checks(self) -> bool:
        """Sprawdza dostƒôpno≈õƒá us≈Çug."""
        checks_passed = 0
        total_checks = 1
        
        try:
            # GAJA health check
            logger.info("Sprawdzam GAJA server...")
            gaja_config = self.config.get("gaja", {})
            base_url = gaja_config.get("base_url", "http://localhost:8001").rstrip('/')
            health_url = f"{base_url}/health"
            
            async with aiohttp.ClientSession() as session:
                async with session.get(health_url) as response:
                    if response.status == 200:
                        logger.info("‚úÖ GAJA server dostƒôpny")
                        checks_passed += 1
                    else:
                        logger.error(f"‚ùå GAJA server niedostƒôpny (status: {response.status})")
            
        except Exception as e:
            logger.error(f"‚ùå B≈ÇƒÖd health check: {e}")
        
        success_rate = checks_passed / total_checks
        logger.info(f"Health checks: {checks_passed}/{total_checks} ({success_rate*100:.0f}%)")
        return success_rate >= 0.5  # Przynajmniej 50% musi dzia≈Çaƒá
    
    async def load_scenario(self, scenario_path: str) -> Optional[Dict[str, Any]]:
        """≈Åaduje scenariusz z pliku YAML."""
        try:
            with open(scenario_path, 'r', encoding='utf-8') as f:
                scenario = yaml.safe_load(f)
            
            logger.info(f"üìã Za≈Çadowano scenariusz: {scenario.get('meta', {}).get('name', 'Unknown')}")
            return scenario
            
        except Exception as e:
            logger.error(f"‚ùå B≈ÇƒÖd ≈Çadowania scenariusza {scenario_path}: {e}")
            return None
    
    async def execute_scenario(self, scenario: Dict[str, Any]) -> Dict[str, Any]:
        """Wykonuje pojedynczy scenariusz z surowƒÖpocenƒÖAI."""
        scenario_name = scenario.get('meta', {}).get('name', 'Unknown')
        
        # Ustaw aktualny scenariusz dla zapisywania historii
        self._current_scenario_name = scenario_name
        
        logger.info(f"üöÄ Wykonujƒô scenariusz: {scenario_name}")
        
        result = {
            "name": scenario_name,
            "start_time": datetime.now().isoformat(),
            "steps": [],
            "success": False,
            "error": None,
            "ai_evaluation": None  # Bƒôdzie zawieraƒá ocenƒô AI
        }
        
        try:
            steps = scenario.get('steps', [])
            
            for i, step in enumerate(steps):
                step_result = await self.execute_step(step, i)
                result["steps"].append(step_result)
                
                if not step_result.get("success", False):
                    logger.warning(f"‚ö†Ô∏è Krok {i+1} nie powi√≥d≈Ç siƒô")
                    # Kontynuujemy mimo b≈Çƒôd√≥w
            
            # Sprawd≈∫ czy scenariusz siƒô powi√≥d≈Ç - podstawowa ocena
            successful_steps = sum(1 for s in result["steps"] if s.get("success", False))
            total_steps = len(result["steps"])
            success_rate = successful_steps / total_steps if total_steps > 0 else 0
            result["success_rate"] = success_rate
            
            # SUROWA OCENA AI - to jest kluczowe!
            if scenario_name in self.conversation_history and self.conversation_history[scenario_name]:
                logger.info(f"üîç Uruchamiam surowƒÖ ocenƒô AI dla scenariusza '{scenario_name}'...")
                
                scenario_description = f"{scenario_name}: {scenario.get('description', 'Brak opisu')}"
                expected_behaviors = scenario.get('expected_behaviors', [])
                
                try:
                    # U≈ºyj AI evaluatora z klasy
                    ai_evaluation = await self.ai_evaluator.evaluate_conversation(
                        self.conversation_history[scenario_name],
                        scenario_description,
                        expected_behaviors
                    )
                    
                    result["ai_evaluation"] = {
                        "total_score": ai_evaluation.total_score,
                        "max_possible_score": ai_evaluation.max_possible_score,
                        "success_percentage": ai_evaluation.success_percentage,
                        "overall_issues": ai_evaluation.overall_issues,
                        "overall_suggestions": ai_evaluation.overall_suggestions,
                        "conversation_analysis": ai_evaluation.conversation_analysis,
                        "passes_quality_gate": ai_evaluation.passes_quality_gate,
                        "critical_failures": ai_evaluation.critical_failures,
                        "criteria_scores": [
                            {
                                "criteria": cr.criteria.value,
                                "score": cr.score,
                                "max_score": cr.max_score,
                                "reasoning": cr.reasoning,
                                "issues": cr.issues,
                                "suggestions": cr.suggestions,
                                "severity": cr.severity
                            }
                            for cr in ai_evaluation.criteria_results
                        ]
                    }
                    
                    # Zaktualizuj ocenƒô sukcesu na podstawie AI (BEZWZGLƒòDNA OCENA)
                    ai_success_rate = ai_evaluation.success_percentage / 100
                    result["ai_success_rate"] = ai_success_rate
                    
                    # SUROWA OCENA - AI musi przej≈õƒá quality gate
                    result["success"] = ai_evaluation.passes_quality_gate and ai_success_rate >= 0.75
                    
                    if ai_evaluation.passes_quality_gate:
                        logger.success(f"‚úÖ OCENA AI: {ai_evaluation.success_percentage:.1f}% - POZYTYWNA")
                    else:
                        logger.error(f"‚ùå OCENA AI: {ai_evaluation.success_percentage:.1f}% - NEGATYWNA")
                    
                    if ai_evaluation.critical_failures:
                        logger.error(f"üí• KRYTYCZNE B≈ÅƒòDY: {len(ai_evaluation.critical_failures)}")
                        for failure in ai_evaluation.critical_failures[:3]:
                            logger.error(f"  üí• {failure}")
                    
                    if ai_evaluation.overall_issues:
                        logger.warning(f"‚ö†Ô∏è Znalezione problemy: {len(ai_evaluation.overall_issues)}")
                        for issue in ai_evaluation.overall_issues[:3]:  # Poka≈º pierwsze 3
                            logger.warning(f"  ‚ö†Ô∏è {issue}")
                
                except Exception as e:
                    logger.error(f"‚ùå B≈ÇƒÖd oceny AI: {e}")
                    result["ai_evaluation_error"] = str(e)
                    # Bez oceny AI, u≈ºywamy podstawowej oceny
                    result["success"] = success_rate >= 0.7
            else:
                logger.warning(f"‚ö†Ô∏è Brak historii konwersacji dla scenariusza '{scenario_name}' - pomijam ocenƒô AI")
                result["success"] = success_rate >= 0.7
            
            if result["success"]:
                if result.get("ai_evaluation"):
                    ai_score = result["ai_evaluation"].get("success_percentage", 0)
                    logger.success(f"‚úÖ Scenariusz '{scenario_name}' zako≈Ñczony pomy≈õlnie (AI: {ai_score:.1f}%)")
                else:
                    logger.success(f"‚úÖ Scenariusz '{scenario_name}' zako≈Ñczony pomy≈õlnie ({success_rate*100:.0f}%)")
            else:
                if result.get("ai_evaluation"):
                    ai_score = result["ai_evaluation"].get("success_percentage", 0)
                    logger.warning(f"‚ö†Ô∏è Scenariusz '{scenario_name}' czƒô≈õciowo niepowodzenie (AI: {ai_score:.1f}%)")
                else:
                    logger.warning(f"‚ö†Ô∏è Scenariusz '{scenario_name}' czƒô≈õciowo niepowodzenie ({success_rate*100:.0f}%)")
            
        except Exception as e:
            result["error"] = str(e)
            logger.error(f"‚ùå B≈ÇƒÖd scenariusza '{scenario_name}': {e}")
            result["success"] = False
        
        result["end_time"] = datetime.now().isoformat()
        return result
    
    async def execute_step(self, step: Dict[str, Any], step_idx: int) -> Dict[str, Any]:
        """Wykonuje pojedynczy krok."""
        step_type = step.get('action') or step.get('type', 'unknown')
        logger.info(f"  üî∏ Krok {step_idx+1}: {step_type}")
        
        result = {
            "step_index": step_idx,
            "action": step_type,
            "start_time": datetime.now().isoformat(),
            "success": False,
            "response": None,
            "error": None
        }
        
        try:
            if step_type == "send_text" or step_type == "text":
                message = step.get('data', {}).get('message') or step.get('message', 'Test message')
                response = await self.send_text_with_auth(message)
                
                # Zapisz do historii konwersacji
                conversation_turn = {
                    "query": message,
                    "response": response,
                    "timestamp": datetime.now().isoformat(),
                    "step_index": step_idx
                }
                
                scenario_name = getattr(self, '_current_scenario_name', 'unknown')
                if scenario_name not in self.conversation_history:
                    self.conversation_history[scenario_name] = []
                self.conversation_history[scenario_name].append(conversation_turn)
                
                if response.get('success'):
                    result["success"] = True
                    result["response"] = response
                    logger.info(f"    ‚úÖ Wiadomo≈õƒá wys≈Çana: '{message[:50]}...'")
                    
                    # Wy≈õwietl fragment odpowiedzi AI dla diagnostyki
                    ai_response = response.get('data', {}).get('response', 'Brak odpowiedzi')
                    if isinstance(ai_response, str) and len(ai_response) > 100:
                        logger.info(f"    ü§ñ AI: {ai_response[:100]}...")
                    else:
                        logger.info(f"    ü§ñ AI: {ai_response}")
                else:
                    result["error"] = response.get('error', 'Unknown error')
                    logger.error(f"    ‚ùå B≈ÇƒÖd wysy≈Çania: {result['error']}")
            
            elif step_type == "generate_tts" or step_type == "tts":
                # text = step.get('data', {}).get('text') or step.get('text', 'Test audio')
                # audio_data = await self.audio_processor.generate_tts_audio(text)
                
                # TTS pomijane na razie ze wzglƒôdu na problemy z komponentami
                result["success"] = True
                result["response"] = {"audio_size": "skipped"}
                logger.info(f"    ‚è≠Ô∏è TTS pomijane na razie")
            
            elif step_type == "audio":
                # Obs≈Çuga test√≥w audio
                audio_data = step.get('data', {})
                message = (audio_data.get('message') or 
                          step.get('message') or 
                          step.get('tts_text') or 
                          'Test audio message')
                
                # Symuluj przetwarzanie audio przez tekst
                response = await self.send_text_with_auth(f"[AUDIO] {message}")
                
                # Zapisz do historii konwersacji
                conversation_turn = {
                    "query": f"[AUDIO] {message}",
                    "response": response,
                    "timestamp": datetime.now().isoformat(),
                    "step_index": step_idx
                }
                
                scenario_name = getattr(self, '_current_scenario_name', 'unknown')
                if scenario_name not in self.conversation_history:
                    self.conversation_history[scenario_name] = []
                self.conversation_history[scenario_name].append(conversation_turn)
                
                if response.get('success'):
                    result["success"] = True
                    result["response"] = response
                    logger.info(f"    ‚úÖ Test audio wykonany: '{message}'")
                    ai_response = response.get('data', {}).get('response', 'Brak odpowiedzi')
                    logger.info(f"    ü§ñ AI: {ai_response}")
                else:
                    result["error"] = response.get('error', 'Unknown error')
                    logger.error(f"    ‚ùå B≈ÇƒÖd audio: {result['error']}")
            
            elif step_type == "restart_gaja":
                # Symulacja restartu - nie robimy nic, ale oznaczamy jako sukces
                result["success"] = True
                result["response"] = {"message": "Restart symulowany"}
                logger.info(f"    ‚úÖ Restart GAJA symulowany")
            
            elif step_type == "wait":
                wait_time = step.get('data', {}).get('seconds', 1)
                await asyncio.sleep(wait_time)
                result["success"] = True
                logger.info(f"    ‚úÖ Czekanie {wait_time}s")
            
            else:
                logger.warning(f"    ‚ö†Ô∏è Nieznany typ kroku: {step_type}")
                result["success"] = True  # Nie blokujemy na nieznanych krokach
        
        except Exception as e:
            result["error"] = str(e)
            logger.error(f"    ‚ùå B≈ÇƒÖd kroku: {e}")
        
        result["end_time"] = datetime.now().isoformat()
        return result
    
    async def run_scenario(self, scenario_name: str) -> bool:
        """Uruchamia pojedynczy scenariusz."""
        
        # Logowanie przed scenariuszem
        logger.info("üîê Logowanie do serwera GAJA...")
        if not await self.login("admin"):
            logger.error("‚ùå Nie uda≈Ço siƒô zalogowaƒá - test przerwany")
            return False
        
        # Je≈õli podano pe≈ÇnƒÖ ≈õcie≈ºkƒô, u≈ºyj jej bezpo≈õrednio
        if "/" in scenario_name or "\\" in scenario_name:
            scenario_path = Path(scenario_name)
        else:
            # Je≈õli podano tylko nazwƒô, dodaj katalog i rozszerzenie je≈õli nie ma
            if not scenario_name.endswith('.yaml'):
                scenario_path = Path("scenarios") / f"{scenario_name}.yaml"
            else:
                scenario_path = Path("scenarios") / scenario_name
        
        if not scenario_path.exists():
            logger.error(f"‚ùå Scenariusz nie istnieje: {scenario_path}")
            return False
        
        scenario = await self.load_scenario(str(scenario_path))
        if not scenario:
            return False
        
        result = await self.execute_scenario(scenario)
        self.results.append(result)
        
        return result.get("success", False)
    
    async def run_all_scenarios(self) -> bool:
        """Uruchamia wszystkie scenariusze."""
        scenarios_dir = Path("scenarios")
        if not scenarios_dir.exists():
            logger.error("‚ùå Katalog scenarios nie istnieje")
            return False
        
        scenario_files = list(scenarios_dir.glob("*.yaml"))
        if not scenario_files:
            logger.error("‚ùå Brak plik√≥w scenariuszy")
            return False
        
        # Logowanie przed rozpoczƒôciem test√≥w
        logger.info("üîê Logowanie do serwera GAJA...")
        if not await self.login("admin"):
            logger.error("‚ùå Nie uda≈Ço siƒô zalogowaƒá - testy przerwane")
            return False
        
        logger.info(f"üìö Znaleziono {len(scenario_files)} scenariuszy")
        
        success_count = 0
        for scenario_file in scenario_files:
            scenario_name = scenario_file.stem
            try:
                success = await self.run_scenario(scenario_name)
                if success:
                    success_count += 1
            except Exception as e:
                logger.error(f"‚ùå B≈ÇƒÖd scenariusza {scenario_name}: {e}")
        
        total_scenarios = len(scenario_files)
        success_rate = success_count / total_scenarios
        
        logger.info(f"üìä Podsumowanie: {success_count}/{total_scenarios} scenariuszy pomy≈õlnych ({success_rate*100:.0f}%)")
        
        return success_rate >= 0.5
    
    def generate_simple_report(self) -> str:
        """Generuje prosty raport HTML."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = Path("reports") / f"test_report_{timestamp}.html"
        report_file.parent.mkdir(exist_ok=True)
        
        # Prosta statystyka
        total_scenarios = len(self.results)
        successful_scenarios = sum(1 for r in self.results if r.get("success", False))
        
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <title>GAJA Test Report</title>
            <meta charset="utf-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .success {{ color: green; }}
                .error {{ color: red; }}
                .warning {{ color: orange; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <h1>üß™ GAJA Test Report</h1>
            <p><strong>Timestamp:</strong> {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}</p>
            <p><strong>Scenariusze:</strong> {successful_scenarios}/{total_scenarios} pomy≈õlne</p>
            
            <h2>üìã Wyniki scenariuszy</h2>
            <table>
                <tr>
                    <th>Scenariusz</th>
                    <th>Status</th>
                    <th>Sukces krok√≥w</th>
                    <th>Czas</th>
                </tr>
        """
        
        for result in self.results:
            status_class = "success" if result.get("success") else "error"
            status_text = "‚úÖ Sukces" if result.get("success") else "‚ùå B≈ÇƒÖd"
            
            steps_info = ""
            if "steps" in result:
                successful_steps = sum(1 for s in result["steps"] if s.get("success", False))
                total_steps = len(result["steps"])
                steps_info = f"{successful_steps}/{total_steps}"
            
            start = result.get("start_time", "")
            end = result.get("end_time", "")
            
            html += f"""
                <tr>
                    <td>{result.get('name', 'Unknown')}</td>
                    <td class="{status_class}">{status_text}</td>
                    <td>{steps_info}</td>
                    <td>{start}</td>
                </tr>
            """
        
        html += """
            </table>
            
            <h2>üîß Szczeg√≥≈Çy</h2>
            <pre id="details"></pre>
            
            <script>
                document.getElementById('details').textContent = JSON.stringify(""" + json.dumps(self.results, indent=2) + """, null, 2);
            </script>
        </body>
        </html>
        """
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(html)
        
        logger.info(f"üìä Raport zapisany: {report_file}")
        return str(report_file)


async def main():
    """G≈Ç√≥wna funkcja."""
    parser = argparse.ArgumentParser(description="GAJA Test Runner")
    parser.add_argument("--scenario", help="Nazwa scenariusza do uruchomienia")
    parser.add_argument("--all", action="store_true", help="Uruchom wszystkie scenariusze")
    parser.add_argument("--config", default="config.yaml", help="≈öcie≈ºka do pliku konfiguracji")
    
    args = parser.parse_args()
    
    # Konfiguracja logowania
    logger.remove()
    logger.add(
        sys.stdout,
        format="<green>{time:HH:mm:ss}</green> | <level>{level: <8}</level> | {message}",
        level="INFO"
    )
    
    logger.info("üöÄ Uruchamiam GAJA Test Framework")
    
    runner = SimpleTestRunner(args.config)
    
    # Setup
    if not await runner.setup_components():
        logger.error("‚ùå B≈ÇƒÖd inicjalizacji komponent√≥w")
        return False
    
    # Health checks
    if not await runner.health_checks():
        logger.error("‚ùå Health checks nie przesz≈Çy")
        return False
    
    # Uruchomienie test√≥w
    success = False
    
    if args.scenario:
        logger.info(f"üìã Uruchamiam scenariusz: {args.scenario}")
        success = await runner.run_scenario(args.scenario)
        
    elif args.all:
        logger.info("üìö Uruchamiam wszystkie scenariusze")
        success = await runner.run_all_scenarios()
        
    else:
        logger.info("üìã Uruchamiam domy≈õlny scenariusz: basic_conversation")
        success = await runner.run_scenario("basic_conversation")
    
    # Generowanie raportu
    try:
        report_path = runner.generate_simple_report()
        logger.info(f"üìä Raport wygenerowany: {report_path}")
        
        # Otw√≥rz raport w przeglƒÖdarce
        import webbrowser
        webbrowser.open(f"file://{Path(report_path).absolute()}")
        logger.info("üåê Raport otwarty w przeglƒÖdarce")
        
    except Exception as e:
        logger.error(f"‚ùå B≈ÇƒÖd generowania raportu: {e}")
    
    if success:
        logger.success("üéâ Testy zako≈Ñczone pomy≈õlnie!")
        return True
    else:
        logger.error("üí• Testy zako≈Ñczone niepowodzeniem!")
        return False


if __name__ == "__main__":
    result = asyncio.run(main())
    sys.exit(0 if result else 1)
